(function (){
    var app = angular.module('djland.editPlaysheet',['djland.api','djland.utils','ui.sortable','ui.bootstrap']);
	app.controller('PlaysheetController',function($filter,$rootScope,$scope,$interval,$timeout,call){
        this.info = {};
        this.promotions = {};
        this.playitems = {};
        this.podcast = {};
        this.info.id = playsheet_id;
        this.member_id = member_id;
        this.username = username;
        this.loading = true;
        this.days_of_week = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
        this.months_of_year = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

        this.tracklist_overlay_header = "Thanks for submitting your playsheet";
        this.podcast_status = "Your podcast is being created";
        var this_ = this;

        //Helper Variables
        this.using_sam = $('#using_sam').text()=='1' ? true : false;
        this.sam_visible = false;
        this.socan = $('#socan').text() == 'true' ? true : false;
    	this.tags = tags;
    	this.help = help;
        this.complete = false;


        this.add = function(id){
            var row = angular.copy(this_.row_template);
            this.playitems.splice(id+1,0,row);
            this.update();
        }
        this.remove = function(id){
            this.playitems.splice(id,1);
            if(this.playitems.length < 1){
                $('#addRows').text("Add Row");
            }
            this.update();
        }
        this.addFiveRows = function(){
            if($('#addRows').text() == "Add Five More Rows"){
                for(var i=0;i<5;i++){
                    this.add(this.playitems.length-1);
                }
            }else{
                this.add(0);
                $('#addRows').text("Add Five More Rows");
            }
        }
        this.addStartRow = function(){
            this.playitems = Array();
            this.playitems[0] = angular.copy(this.row_template);
            this.update();

        }
        this.cueTrack = function (playitem) {
            playitem.start = new Date();
            playitem.insert_song_start_hour = $filter('pad')(playitem.start.getHours(), 2);
            playitem.insert_song_start_minute = $filter('pad')(playitem.start.getMinutes(), 2);
        }
        this.endTrack = function (playitem) {
            if (playitem.start == '0' || playitem.start == null) return;
            var start_milliseconds = playitem.start.getTime();//1000*60*60*playitem.insert_song_start_hour + 1000*60*playitem.insert_song_start_minute;
            var now = new Date();
            var end_milliseconds = now.getTime();
            var length = end_milliseconds - start_milliseconds;
            var length = new Date(length);
            playitem.insert_song_length_minute = $filter('pad')(length.getMinutes(), 2);
            playitem.insert_song_length_second = $filter('pad')(length.getSeconds(), 2);
        }

        //Sync Variables On Change
        this.updateTrackStart = function (playitem) {
            playitem.start = new Date();
            playitem.start.setHours(playitem.insert_song_start_hour);
            playitem.start.setMinutes(playitem.insert_song_start_minute);
            playitem.start.setSeconds(0);
        };
        this.updateTime = function(){
            var now = new Date();
            call.getNextShowTime(this_.active_show.id,now).then(function(response){
                    console.log(response.data);
                    var start_unix = response.data.start;
                    var end_unix = response.data.end;
                    this_.info.unix_time = response.data.start;
                    this_.start = new Date(start_unix * 1000);
                    this_.end = new Date(end_unix * 1000);


                    this_.info.start_time = $filter('date')(this_.start,'yyyy/MM/dd HH:mm:ss');
                    this_.info.end_time = $filter('date')(this_.end,'yyyy/MM/dd HH:mm:ss');
                    this_.start_hour =  $filter('pad')(this_.start.getHours(),2);
                    this_.start_minute = $filter('pad')(this_.start.getMinutes(),2);
                    this_.start_second = $filter('pad')(this_.start.getSeconds(),2);
                    this_.end_hour =  $filter('pad')(this_.end.getHours(),2);
                    this_.end_minute = $filter('pad')(this_.end.getMinutes(),2);
                    this_.end_second = $filter('pad')(this_.end.getSeconds(),2);
                    //Populate Template Row, then add 5 rows
                    var show_date = this_.start.getDate();
                                     //Update Podcast information Mon, 26 Oct 2015 07:58:08 -0700

                    this_.updateEnd();
                    this_.updateStart();

                    if(this_.info.id < 1){
                        call.getPromotions(start_unix,end_unix-start_unix,this_.active_show.id).then(function(response){
                            this_.promotions = response.data;
                            console.log(this_.promotions);
                        },function(error){
                            this_.log_error(error);
                            call.getPromotions(start_unix,end_unix-start_unix,this_.active_show.id).then(function(response){
                                this_.promotions = response.data;
                            });
                        });
                    }

            });
        }
        this.updateShowValues = function(element){

            //When a new show is selected, updat all the information.
            this.active_show = this.member_shows.filter(function(object){if(object.id == this_.show_value) return object;})[0];
            this.show = this.active_show.show;
            console.log(this.active_show);
            this.info.show_id = parseInt(this.active_show.id);
            this.info.host = this.active_show.show.host;
            this.info.edit_name = this.username;
            this.podcast.show_id = this.info.show_id;
            this.podcast.author = this.info.host;
            this.info.crtc = this.active_show.crtc;
            this.info.lang = this.active_show.lang;
            for(var playitem in this.playitems){
                this.playitems[playitem].show_id = this.info.show_id;
                this.playitems[playitem].crtc_category = this.info.crtc;
                this.playitems[playitem].lang = this.info.lang;
            }
            call.getShowPlaysheets(this_.active_show.id).then(function(response){
                //DISPLAY OLD PLAYSHEETS
                this_.existing_playsheets = response.data.sort(function(a, b) {
				var re = new RegExp('-','g');
				return new Date(b.start_time.replace(re,'/')) - new Date(a.start_time.replace(re,'/'));
				});
            });
            this.updateTime();
        }
        this.updateSpokenword = function(){
            this.info.spokenword_duration = this.spokenword_hours * 60 + this.spokenword_minutes;
        }
        this.updateStart = function(){
            this.start.setHours(this.start_hour);
            this.start.setMinutes(this.start_minute);
            this.start.setSeconds(this.start_second);
            this.info.start_time = $filter('date')(this.start,'yyyy/MM/dd HH:mm:ss');
            this.updatePodcastDate();
            this.podcast.duration = (this.end.getTime() - this.start.getTime()) /1000;

        }
        this.updateEnd = function(){
            this.end.setHours(this.end_hour);
            this.end.setMinutes(this.end_minute);
            this.end.setSeconds(this.end_second);
            this.info.end_time = $filter('date')(this.end,'yyyy/MM/dd HH:mm:ss');
            this.podcast.duration = (this.end.getTime() - this.start.getTime()) /1000;
        }

        //Setting Show Times
        this.startShow = function(){
            this.start = new Date();
            this.start_hour =  $filter('pad')(this.start.getHours(),2);
            this.start_minute = $filter('pad')(this.start.getMinutes(),2);
            this.start_second = $filter('pad')(this.start.getSeconds(),2);
            this.info.start_time = this.start;
            this.podcast.duration = (this.end.getTime() - this.start.getTime()) /1000;
        }
        this.endShow = function(){
            this.end = new Date();
            this.end_hour =  $filter('pad')(this.end.getHours(),2);
            this.end_minute = $filter('pad')(this.end.getMinutes(),2);
            this.end_second = $filter('pad')(this.end.getSeconds(),2);
            //this.end_time = $filter('date')(end, 'HH:mm:ss');
            this.info.end_time = $filter('date')(this.end,'yyyy/MM/dd HH:mm:ss');
            this.podcast.duration = (this.end.getTime() - this.start.getTime()) /1000;
        }

        this.loadRebroadcast = function(){
            call.getPlaysheetData(this.existing_playsheet).then(function(response){
                this_.playitems = response.data.playitems;
                this_.info.spokenword_duration = response.data.playsheet.spokenword_duration;
                if(this_.info.spokenword_duration != null){
                    this_.spokenword_hours = Math.floor(this_.info.spokenword_duration / 60);
                    this_.spokenword_minutes = this_.info.spokenword_duration % 60;
                }else{
                    this_.spokenword_hours = null;
                    this_.spokenword_minutes = null;
                }
                this_.ads = response.data.ads;

            });
        }
		this.getNewUnix = function(){
			if(this.loading == true) return;
			//convert to seconds from javascripts milliseconds
			var start_unix = this.start / 1000;
			var end_unix = this.end / 1000;

			//get minutes for start, and push unix to 0/30 minute mark on closest hour
			var minutes = this.start.getMinutes();
			start_unix-=minutes*60;
			if(minutes >= 45){
				//roll to the next hour by adding 3600s
				start_unix+=60*60;
			}else if(minutes < 45 && minutes >= 15){
				//set to 30 minutes through by adding 1800s
				start_unix+=30*60;
			}else{
				//already at zero minutes.
			}
			//Get minutes for end, and push unix to 0/30 minute mark on closes hour
			minutes = this.end.getMinutes();
            end_unix-=minutes*60;
			if(minutes >= 45){
				//roll to the next hour by adding 3600s
				end_unix+=60*60;
			}else if(minutes < 45 && minutes >= 15){
				//set to 30 minutes through by adding 1800s
				end_unix+=30*60;
			}else{
				//already at zero minutes.
			}

			this.start_unix = start_unix;
			this.end_unix = end_unix;
			var duration = start_unix - end_unix;
			if(this_.info.id < 1){
				call.getPromotions(start_unix,end_unix-start_unix,this_.active_show.id).then(function(response){
					this_.promotions = response.data;
				},function(error){
					this_.log_error(error);
					call.getPromotions(start_unix,end_unix-start_unix,this_.active_show.id).then(function(response){
						this_.promotions = response.data;
					});
				});
			}
		}

        //Initialization of Playsheet
        this.init = function(){
            var this_ = this;
            //If playsheet exists, load it.
            if(this.info.id > 0){
                call.getPlaysheetData(this.info.id).then(function(data){
                    var playsheet = data.data;
                    this_.info = {};
                    for(var item in playsheet.playsheet){
                        this_.info[item] = playsheet.playsheet[item];
                    }
                    var re = new RegExp('-','g');
                    this_.info.start_time = this_.info.start_time.replace(re,'/');
                    this_.info.end_time = this_.info.end_time.replace(re,'/');
                    //Create Extra Variables to allow proper display in UI
                    this_.start = new Date(this_.info.start_time);
                    this_.end = new Date(this_.info.end_time);
                    this_.start_hour =  $filter('pad')(this_.start.getHours(),2);
                    this_.start_minute = $filter('pad')(this_.start.getMinutes(),2);
                    this_.start_second = $filter('pad')(this_.start.getSeconds(),2);
                    this_.end_hour =  $filter('pad')(this_.end.getHours(),2);
                    this_.end_minute = $filter('pad')(this_.end.getMinutes(),2);
                    this_.end_second = $filter('pad')(this_.end.getSeconds(),2);

                    if(this_.info.spokenword_duration != null){
                        this_.spokenword_hours = Math.floor(this_.info.spokenword_duration / 60);
                        this_.spokenword_minutes = this_.info.spokenword_duration % 60;
                    }else{
                        this_.spokenword_hours = null;
                        this_.spokenword_minutes = null;
                    }
                    //Set Show Data
                    this_.show = playsheet.show;
                    console.log(this_.show);
                    this_.playitems = playsheet.playitems;
                    this_.podcast = playsheet.podcast == null ? {'id':-1,'playsheet_id':this_.info.id, 'show_id':playsheet.show_id} : playsheet.podcast;
                    this_.promotions = playsheet.promotions;
                    //If no playitems, change "Add Five Rows" button to say "Add Row" instead
                    if(this_.playitems < 1){
                        $('#addRows').text("Add Row");
                    }
                    for(var playitem in this_.playitems){
                        console.log(this_.playitems[playitem]);
                        this_.playitems[playitem].insert_song_start_hour = $filter('pad')( this_.playitems[playitem].insert_song_start_hour , 2);
                        this_.playitems[playitem].insert_song_start_minute = $filter('pad')( this_.playitems[playitem].insert_song_start_minute , 2);
                        this_.playitems[playitem].insert_song_length_minute = $filter('pad')( this_.playitems[playitem].insert_song_length_minute , 2);
                        this_.playitems[playitem].insert_song_length_second = $filter('pad')( this_.playitems[playitem].insert_song_length_second , 2);
                    }

                    //Get Member shows, and set active show
                    call.getActiveMemberShows(this.member_id).then(function(data){
                        var shows = data.data.shows;
                        this_.member_shows = shows;
                        //Find what show this playsheet is for, and set it as active show to load information.
                        for(var show in this_.member_shows){

                            if(this_.show.name.toString() == shows[show].show.name.toString()){
                                this_.active_show = this_.member_shows[show];
                                this_.show_value = shows[show]['id'];
                                this_.show = shows[show]['show'];
                            }
                        }
                        console.log(this_.active_show);
                        call.getShowPlaysheets(this_.active_show.id).then(function(response){
                            //DISPLAY OLD PLAYSHEETS
							this_.existing_playsheets = response.data.sort(function(a, b) {
							var re = new RegExp('-','g');
							return new Date(b.start_time.replace(re,'/')) - new Date(a.start_time.replace(re,'/'));
							});
                        });
                        //Populate the template row
                        var show_date = this_.start.getDate();
                        this_.row_template = {"show_id":this_.active_show.id,"playsheet_id":this_.info.id,"format_id":null,"is_playlist":0,"is_canadian":0,"is_yourown":0,"is_indy":0,"is_fem":0,"show_date":show_date,"duration":null,"is_theme":null,"is_background":null,"crtc_category":this_.info.crtc,"lang":this_.info.lang,"is_part":0,"is_inst":0,"is_hit":0,"insert_song_start_hour":"00","insert_song_start_minute":"00","insert_song_length_minute":"00","insert_song_length_second":"00","artist":null,"title":null,"song":null,"composer":null};
                        this_.checkIfComplete();
                        if(this_.using_sam){
                            this_.updateSamPlays();
                        }
                        this_.loading = false;
                    });

                });
            }else{

                this.podcast = {};

                //TODO load ads.

                this.info.status = '1';
                this.info.type='Live';

                this.spokenword_hours = null;
                this.spokenword_minutes = null;
                this.podcast.active = 0;

                //Get Shows Listing
                call.getActiveMemberShows(this.member_id).then(function(data){
                    var shows = data.data.shows;
                    this_.member_shows = shows;
                    if(shows){
                        //Cheat Code to get first active show.
                        for(var show in this_.member_shows){
                            console.log(shows[show].show.name.toString());
                            this_.active_show = this_.member_shows[show];
                            this_.show = this_.active_show.show;

                            this_.show_value = this_.active_show['id'];
                            this_.info.show_id = parseInt(this_.active_show.id);
                            this_.info.host = this_.active_show.show.host;
                            this_.info.create_name = this_.info.host;

                            this_.podcast.author = this_.info.host;
                            this_.info.crtc = this_.active_show.crtc;
                            this_.info.lang = this_.active_show.lang || 'English';

                            for(var playitem in this_.playitems){
                                this_.playitems[playitem].show_id = this_.info.show_id;
                            }
                            break;
                        }
                        var now = new Date();

                        call.getShowPlaysheets(this_.show_value).then(function(response){
                            //DISPLAY OLD PLAYSHEETS
							this_.existing_playsheets = response.data.sort(function(a, b) {
							var re = new RegExp('-','g');
							return new Date(b.start_time.replace(re,'/')) - new Date(a.start_time.replace(re,'/'));
							});

                        });

                       call.getNextShowTime(this_.active_show.id,now).then(function(response){
                            console.log(response.data);
                            var start_unix = response.data.start;
                            var end_unix = response.data.end;
                            this_.start = new Date(start_unix * 1000);
                            this_.end = new Date(end_unix * 1000);

                            this_.info.unix_time = this_.start.getTime() / 1000;
                            this_.info.start_time = $filter('date')(this_.start,'yyyy/MM/dd HH:mm:ss');
                            this_.info.end_time = $filter('date')(this_.end,'yyyy/MM/dd HH:mm:ss');
                            this_.start_hour =  $filter('pad')(this_.start.getHours(),2);
                            this_.start_minute = $filter('pad')(this_.start.getMinutes(),2);
                            this_.start_second = $filter('pad')(this_.start.getSeconds(),2);
                            this_.end_hour =  $filter('pad')(this_.end.getHours(),2);
                            this_.end_minute = $filter('pad')(this_.end.getMinutes(),2);
                            this_.end_second = $filter('pad')(this_.end.getSeconds(),2);

                            console.log(this_.start_hour);
                            //Populate Template Row, then add 5 rows
                            var show_date = this_.start.getDate();
                                                //Update Podcast information
                            this_.updatePodcastDate();
                            this_.updateEnd();
                            this_.updateStart();
                            this_.row_template = {"show_id":this_.active_show.id,"playsheet_id":this_.info.id,"format_id":null,"is_playlist":0,"is_canadian":0,"is_yourown":0,"is_indy":0,"is_fem":0,"show_date":show_date,"duration":null,"is_theme":null,"is_background":null,"crtc_category":this_.info.crtc,"lang":this_.info.lang,"is_part":0,"is_inst":0,"is_hit":0,"insert_song_start_hour":"00","insert_song_start_minute":"00","insert_song_length_minute":"00","insert_song_length_second":"00","artist":null,"title":null,"song":null,"composer":null};
                            this_.addStartRow();
                            for(var i = 0; i<4; i++) {
                                this_.add(this_.playitems.length-1);
                            }
                            call.getPromotions(start_unix, end_unix-start_unix,this_.active_show.id).then(function(response){
                                this_.promotions = response.data;
                            },function(error){
                            this_.log_error(error);
                                call.getPromotions(start_unix,end_unix-start_unix,this_.active_show.id).then(function(response){
                                    this_.promotions = response.data;
                                });
                            });
                            this_.update();
                            if(this_.using_sam){
                                this_.updateSamPlays();
                            }
                            this_.loading = false;
                        });
                    }else{
                        this_.loading = false;
                    }

                });
            }

        }
        this.updatePodcastDate = function(){
            this.podcast.date = this.info.start_time;
            this.podcast.iso_date = this.days_of_week[this_.start.getDay()] + ", " + this_.start.getDate() + " " + this_.months_of_year[this.start.getMonth()] + " " + this_.start.getFullYear() + " " + $filter('date')(this_.start,'HH:mm:ss') + " -0700" ;
        }
        //When a playsheet item is added or removed, check for completeness
        $scope.$watchCollection('playsheet.playitems', function () {
            this_.update();
        },true);
        $scope.$watch('playsheet.info.start_time', function () {
            this_.info.start_time = $filter('date')(this_.info.start_time,'yyyy/MM/dd HH:mm:ss');
            this_.start = new Date(this_.info.start_time);
            this_.start_hour =  $filter('pad')(this_.start.getHours(),2);
            this_.start_minute = $filter('pad')(this_.start.getMinutes(),2);
            this_.start_second = $filter('pad')(this_.start.getSeconds(),2);

            if(this_.start && this_.end) this_.podcast.duration = (this_.end.getTime() - this_.start.getTime()) /1000;
            this_.updateSamPlays();
			this_.getNewUnix();

        });
        $scope.$watch('playsheet.info.end_time', function () {
            this_.info.end_time = $filter('date')(this_.info.end_time,'yyyy/MM/dd HH:mm:ss');
            this_.end = new Date(this_.info.end_time);
            this_.end_hour =  $filter('pad')(this_.end.getHours(),2);
            this_.end_minute = $filter('pad')(this_.end.getMinutes(),2);
            this_.end_second = $filter('pad')(this_.end.getSeconds(),2);
            if(this_.start && this_.end) this_.podcast.duration = (this_.end.getTime() - this_.start.getTime()) /1000;
            this_.updateSamPlays();
            console.log("End Time " + this_.info.end_time+" End var ="+  this_.end);
			this_.getNewUnix();
        });



        this.update = function(){
            $timeout(function(){this_.checkIfComplete();},100);
        }
        this.checkIfComplete = function(){
            var this_ = this;
            var playsheet_okay = 'true';
            this.missing = "You have empty values";
            if(this.info.start > this.info.end){
                playsheet_okay = false;
            }
            var m= {'artist':0,'song':0,'album':0,'composer':0,'spokenword':0,'episode_title':0,'episode_summary':0};
            $('.required').each(function(index,element){
                $e = element;

                var model = $e.getAttribute('ng-model');
                if( $(element).val() == "" || $(element).val() == null){
                    playsheet_okay='false';
                    switch(model){
                        case "playitem.artist":
                            if(this_.playitems.length>0) m.artist = 1;
                            break;
                        case 'playitem.album':
                            if(this_.playitems.length>0) m.album = 1;
                            break;
                        case 'playitem.song':
                            if(this_.playitems.length>0) m.song = 1;
                            break;
                        case 'playitem.composer':
                            if(this_.playitems.length>0) m.composer= 1;
                            break;
                        case 'playsheet.spokenword_hours':
                            m.spokenword = 1;
                            break;
                        case 'playsheet.spokenword_minutes':
                            m.spokenword = 1;
                            break;
                        case 'playsheet.info.title':
                            m.episode_title = 1;
                            break;
                        case 'playsheet.info.summary':
                            m.episode_summary = 1;
                            break;
                        default:
                            break;
                    }
                }
            });
            if(playsheet_okay == 'true'){
                this.complete = true;
            }else{
                this.missing = "You have empty values for these fields:"
                + (m.artist == 1 ? " an artist,":"")
                + (m.song == 1 ? " a song title,":"" )
                + (m.album == 1 ? " an album,":"")
                + (m.composer == 1 ? " a composer,":'')
                + (m.spokenword == 1 ? " your spoken word duration,":"")
                + (m.episode_title ==1 ? " your episode title,":"")
                + (m.episode_summary == 1 ? " your episode description":"")
                + '.';
                this.complete = false;
            }
        }
        this.saveDraft = function(){
            var this_ = this;
            this.info.unix_time = this.start.getTime() / 1000;
            var date = $filter('date')(this.start,'yyyy/MM/dd');
            for(var playitem in this_.playitems){
                this_.playitems[playitem].show_date = date;
            }
			this.podcast.date = this.info.start_time;
            this.podcast.show_id = this.info.show_id;
            this.updatePodcastDate();
            this.podcast.title = this.info.title;
            this.podcast.subtitle = this.info.summary;
            this.podcast.summary = this.info.summary;
            if(this.info.status <= 1){
                if(this.info.id < 1){
                    //New Playsheet
                    this_.info.create_name = this_.username;
					this_.info.show_name = this_.active_show.name;
                    callback = call.saveNewPlaysheet(this_.info,this_.playitems,this_.podcast,this_.promotions).then(function(response){
                        this_.info.id = response.data.id;
                        for(var playitem in this_.playitems){
                            this_.playitems[playitem].playsheet_id = this_.info.id;
                        }
                        var show_date = this_.start.getDate();
                        this_.row_template = {"show_id":this_.active_show.id,"playsheet_id":this_.info.id,"format_id":null,"is_playlist":0,"is_canadian":0,"is_yourown":0,"is_indy":0,"is_fem":0,"show_date":show_date,"duration":null,"is_theme":null,"is_background":null,"crtc_category":this_.info.crtc,"lang":this_.info.lang,"is_part":0,"is_inst":0,"is_hit":0,"insert_song_start_hour":"00","insert_song_start_minute":"00","insert_song_length_minute":"00","insert_song_length_second":"00","artist":null,"title":null,"song":null,"composer":null};
                        this_.podcast.id = response.data.podcast_id;
                        this_.podcast.playsheet_id = response.data.id;
                        alert("Draft Saved");

                    },function(error){
                        alert("Draft was not saved. Please contract tecnical services at cjsfprog@sfu.ca ");
                        this_.log_error(error);
                    });
                }else{
                    //Existing Playsheet
                    call.savePlaysheet(this_.info,this_.playitems,this_.podcast,this_.promotions).then(function(response){
                        for(var playitem in this_.playitems){
                            this_.playitems[playitem].playsheet_id = this_.info.id;
                        }
                        alert("Draft Saved");
                    },function(error){
                        alert("Draft was not saved. Please contract tecnical services at cjsfprog@sfu.ca ");
                        this_.log_error(error);
                    });
                }
            }else{
                //TODO: Fix the grammar here
                alert("You've already submitted this playsheet, please submit it instead");
            }

        }
        //Submit a Playsheet
        this.submit = function () {
            var this_ = this;
            this.info.unix_time = this.start.getTime() / 1000;
            this.podcast.show_id = this.info.show_id;
			this.podcast.date = this.info.start_time;
            this.podcast.active = 1;
            this.podcast.title = this.info.title;
            this.podcast.subtitle = this.info.summary;
            this.podcast.summary = this.info.summary;
			this_.info.show_name = this_.active_show.name;
            //Ensuring start and end times work for podcast generation
            if(new Date(this.info.start_time) > new Date() || new Date(this.info.end_time) > new Date()){
                alert("Cannot create a podcast in the future, please save as a draft.");
            }else if(new Date(this.info.start_time) > new Date(this.info.end_time)){
                alert("End time is before start time");
            }else if(this.start.getTime()/1000 - this.end.getTime()/1000 > 8*60*60){
                //TODO: Make this correspond to a config constant so that we can adjust the length of the max podcast on the config - see #255
                alert("This podcast is over 8 hours. 8 Hours is the maximum");
            }else{
               //Update Status to submitted playsheet
                this.info.status = 2;
                var date = $filter('date')(this.start,'yyyy/MM/dd');
                for(var playitem in this_.playitems){
                    this_.playitems[playitem].show_date = date;
                }

                this.updatePodcastDate();

                if(this.info.id < 1){
                    //New Playsheet
                    this_.info.create_name = this_.username;

                    call.saveNewPlaysheet(this_.info,this_.playitems,this_.podcast,this_.promotions).then(function(response){
                        for(var playitem in this_.playitems){
                            this_.playitems[playitem].playsheet_id = this_.info.id;
                        }
                        this_.info.id = response.data.id;
                        this_.podcast.id = response.data.podcast_id;
                        this_.podcast.playsheet_id = response.data.id;
                        this_.tracklist_overlay = true;
                        call.makePodcastAudio(this_.podcast).then(function(reponse){
                            this_.podcast_status = "Podcast Audio Created Successfully.";
                        },function(error){
                            this_.podcast_status = "Could not generate podcast. Playsheet was saved successfully.";
                            this_.error = true;
                            this_.log_error(error);
                        });

                    },function(error){
                        this_.tracklist_overlay_header = "An error has occurred while saving the playsheet";
                        this_.podcast_status = "Podcast Not created";
                        this_.error = true;
                        this_.log_error(error);
                        this_.tracklist_overlay = true;
                    });
                }else{
                    //Existing Playsheet

                    if(this.podcast.id < 1){
                        this.podcast.playsheet_id = this.info.id;
                        this.podcast.show_id = this.info.show_id;

                        call.saveNewPodcast(this_.podcast).then(function(response){
                            this_.podcast.id = response.data['id'];
							console.log(response);
                            call.savePlaysheet(this_.info,this_.playitems,this_.podcast,this_.promotions).then(function(response){
                                this_.tracklist_overlay = true;
                                call.makePodcastAudio(this_.podcast).then(function(reponse){
                                    this_.podcast_status = "Podcast Audio Created Successfully.";
                                },function(error){
                                    this_.podcast_status = "Could not generate podcast. Playsheet was saved successfully.";
                                    this_.error = true;
                                    this_.log_error(error);
                                });

                            },function(error){
                                this_.podcast_status = "Podcast Not created";
                                this_.error = true;
                                this_.log_error(error);
                                this_.tracklist_overlay = true;
                            });
                        });
                    }else{
                        call.savePlaysheet(this_.info,this_.playitems,this_.podcast,this_.promotions).then(function(response){
                            this_.tracklist_overlay = true;
                            call.makePodcastAudio(this_.podcast).then(function(reponse){
                                this_.podcast_status = "Podcast Audio Created Successfully.";
                            },function(error){
                                this_.podcast_status = "Could not generate podcast. Playsheet was saved successfully.";
                                this_.error = true;
                                this_.log_error(error);
                            });
                        },function(error){
                            this_.podcast_status = "Podcast Not created";
                            this_.error = true;
                            this_.log_error(error);
                            this_.tracklist_overlay = true;
                        });
                    }

                }

            }
        }
        this.log_error = function(error){
            var this_ = this;
            this_.tracklist_overlay_header = "An error has occurred while saving the playsheet";
            var error = error.data.split('body>')[1].substring(0,error.data.split('body>')[1].length-2 );

            call.error( error).then(function(response){
                $('#playsheet_error').append('Please contact CJSF Programming Coordinator at cjsfprog@sfu.ca . Your error has been logged');
            },function(error){
                $('#playsheet_error').append('Please contact CJSF Programming Coordinator at cjsfprog@sfu.ca . Your error could not be logged :(');
            });
        }

        this.addSamPlay = function (sam_playitem) {
            this.playitems.splice(this.playitems.length,0,sam_playitem);
            console.log(sam_playitem);
        };
        this.formatSamPlay = function (sam_play) {
            var djland_entry = angular.copy(this.row_template);
            djland_entry.artist = sam_play.artist;
            djland_entry.album = sam_play.album;
            djland_entry.song = sam_play.title;
            djland_entry.composer = sam_play.composer;
            djland_entry.insert_song_start_hour = $filter('pad')( new Date(sam_play.date_played).getHours(), 2);
            djland_entry.insert_song_start_minute = $filter('pad')( new Date(sam_play.date_played).getMinutes(), 2);
            djland_entry.insert_song_length_minute = $filter('pad')((sam_play.duration / 60000), 2);
            djland_entry.insert_song_length_second = $filter('pad')( (sam_play.duration/1000)%60 , 2);
            djland_entry.is_canadian = sam_play.mood.toLowerCase().indexOf('cancon') > -1 ? '1':'0';
            djland_entry.is_fem = sam_play.mood.toLowerCase().indexOf('femcon') > -1 ? '1':'0';
            djland_entry.lang = this_.info.lang;
            return djland_entry;
        };
        this.loadSamPlays = function () {
            var this__ = this;
            call.getSamRecent(0).then(function (data) {
                this_.samRecentPlays = [];
                for (var samplay in data.data) {
                    this_.samRecentPlays.push(this_.formatSamPlay(data.data[samplay]));
                }
            });
        };
        this.samRange = function () {
            var this_ = this;
            call.getSamRange($filter('date')(this.start,'yyyy-MM-dd HH:mm:ss'),$filter('date')(this.end,'yyyy-MM-dd HH:mm:ss')).then(function(data){
                for (var samplay in data.data) {
                    this_.addSamPlay(this_.formatSamPlay(data.data[samplay]));
                }
            });
            this.sam_visible= false;
        };
        this.updateSamPlays = function(){
            var this_ = this;
            call.getSamRange($filter('date')(this.start,'yyyy-MM-dd HH:mm:ss'),$filter('date')(this.end,'yyyy-MM-dd HH:mm:ss')).then(function(data){
                this_.samRecentPlays = [];
                for (var samplay in data.data) {
                    this_.samRecentPlays.push(this_.formatSamPlay(data.data[samplay]));
                }
            });

        }


        // Call Initialization function at end of controller
        this.init();
    });

    app.controller('datepicker', function($filter) {
      this.today = function() {
        this.dt = $filter('date')(new Date(),'yyyy/MM/dd HH:mm:ss');
      };
      this.clear = function () {
        this.dt = null;
      };
      this.open = function($event) {

        $event.preventDefault();
        $event.stopPropagation();
        this.opened = true;
      };
      this.format = 'yyyy/MM/dd HH:mm:ss';
    });

    //Declares playitem attribute
    app.directive('playitem',function(){
    	return{
    		restrict: 'A',
    		templateUrl: 'templates/playitem.html'
    	};
    });
    //Declares ad attribute
    app.directive('promotion',function(){
    	return{
    		restrict: 'A',
    		templateUrl: 'templates/promotion.html'
    	}
    });
    app.directive('datepickerPopup', function (){
        return {
            restrict: 'EAC',
            require: 'ngModel',
            link: function(scope, element, attr, controller) {
                //remove the default formatter from the input directive to prevent conflict
                controller.$formatters.shift();
            }
        }
    });

    //TODO: Use Socan Call to get socan status
    var socan = false;
})();

$(document).ready(function(){
    var can_2_required = $('#can_2_required').text();
    var can_3_required = $('#can_3_required').text();
    var fem_required = $('#fem_required').text();
    var playlist_required = $('#playlist_required').text();
    var hit_max = $('#hit_max').text();

    var can_2_element = $('#can_2_total');
    var can_3_element = $('#can_3_total');
    var fem_element = $('#fem_total');
    var playlist_element = $('#playlist_total');
    var hit_element = $('#hit_total');

    setInterval(function(){
        crtc_totals();
    },3000);
    function crtc_totals(){
        var playitems_count = 0;
        var can_2_count = 0;
        var can_3_count = 0;

        var can_2_total = 0;
        var can_3_total = 0;
        var fem_total = 0;
        var playlist_total = 0;
        var hit_total = 0;

        $('.playitem').each(function(element){
            playitems_count ++;
            if($(this).find('button.femcon').hasClass('filled')) fem_total ++;
            if($(this).find('button.playlist').hasClass('filled')) playlist_total ++;
            if($(this).find('button.hit').hasClass('filled')) hit_total ++;

            if($(this).find('select.crtc_category').val() == '20'){
                can_2_count ++;
                if($(this).find('button.cancon').hasClass('filled')) can_2_total ++;
            }else{
                can_3_count ++;
                if($(this).find('button.cancon').hasClass('filled')) can_3_total ++;
            }
        });
        can_2_element.text((can_2_total / (can_2_count!=0?can_2_count:1) * 100).toFixed(0) + "%");
        if(can_2_total/(can_2_count!=0?can_2_count:1) * 100 < can_2_required && can_2_count > 0) can_2_element.addClass('red');
        else can_2_element.removeClass('red');

        can_3_element.text((can_3_total / (can_3_count!=0?can_3_count:1) * 100).toFixed(0) + "%");
         if(can_3_total/(can_3_count!=0?can_3_count:1) * 100 < can_3_required && can_3_count > 0) can_3_element.addClass('red');
        else can_3_element.removeClass('red');

        fem_element.text((fem_total / (playitems_count!=0?playitems_count:1) * 100).toFixed(0) + "%");
         if(fem_total/(playitems_count!=0?playitems_count:1) * 100 < fem_required && playitems_count > 0) fem_element.addClass('red');
        else fem_element.removeClass('red');

        playlist_element.text((playlist_total / (playitems_count!=0?playitems_count:1) * 100).toFixed(0) + "%");
        if(playlist_total/(playitems_count!=0?playitems_count:1) * 100 < playlist_required && playitems_count > 0) playlist_element.addClass('red');
        else playlist_element.removeClass('red');

        hit_element.text((hit_total / (playitems_count!=0?playitems_count:1) * 100).toFixed(0) + "%");
        if(hit_total/(playitems_count!=0?playitems_count:1) * 100 > hit_max && playitems_count > 0) hit_element.addClass('red');
        else hit_element.removeClass('red');

    }
});
